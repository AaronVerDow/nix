#!/usr/bin/env bash
set -euo pipefail

executable="openscad"

process_all_comments() {
    local file=$1
    local cmd=$2

    [ -z "${OPENSCAD_CACHE:-}" ] && OPENSCAD_CACHE="/tmp/openscad"
    mkdir -p "$OPENSCAD_CACHE"

    local module=""
    # read file in reverse
    while read -r line; do
        
        # remember name of last module
        maybe=$( echo "$line" | grep -E '^\s*module ' | sed 's/\s*module\s*//' | grep -E -o '^[^(]*' ) || true
        [ -z "$maybe" ] || module="$maybe"

        # skip lines until PREVIEW hit
        echo "$line" | grep -q 'PREVIEW' || continue

        args=${line#*PREVIEW}   # delete everything leading up to PREVIEW
        basename=$( basename "$file" )

        # build temporary scad file to call module
        output="$OPENSCAD_CACHE/${basename%.*}_$module.scad"
        build_scad "$file" "$module" "$output" "$args"

        # run command
        $cmd $executable --viewall "$output" &

    done < <( tac "$file" )
    [ -z "$module" ] && return 1
    return 0
}

build_scad() {
    file=$1
    shift
    module=$1
    shift
    output=$1
    shift

    output_dir=$( dirname "$output" )
    relative_file=$( realpath -m "$file" --relative-to="$output_dir" )

    echo "use <$relative_file>; $module($*);" > "$output"
}

start_once() {
    pgrep -f "$*" > /dev/null && return 0
    nohup "$@" &
}

_kill() {
    pgrep -f "$*" | xargs kill
}

fail() {
    echo "$RED$*$NORMAL" 1>&2
    exit 1
}

process_one() {
    local file=$1
    local cmd=$2
    $cmd $executable --viewall "$file"
}

main() {

    cmd="start_once"

    if [ "$1" == "--kill" ]; then
        cmd=_kill
        shift
    fi

    file=$1

    [ "$file" ] || fail "File not specified"
    [ "${2:-}" ] && fail "Too many options"
    [ -f "$file" ] || fail "File does not exist"
    echo "$file" | grep -q '\.scad$' || fail "Not an scad file"
    process_all_comments "$file" "$cmd" || process_one "$file" "$cmd"
}

main "${@:-}"
